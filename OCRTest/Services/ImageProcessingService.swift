//
//  ImageProcessingService.swift
//  OCRTest
//
//  Created by ÏÜ°ÏäπÏú§ on 4/24/25.
//
/// OCR Í∏∞Îä•ÎßåÏùÑ Îã¥ÎãπÌïòÎäî ÏÑúÎπÑÏä§ Î†àÏù¥Ïñ¥
/// SOLID ÏõêÏπô Ï§ë DIP(ÏùòÏ°¥ Ïó≠Ï†Ñ ÏõêÏπô), ISP(Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Î∂ÑÎ¶¨ ÏõêÏπô) Ï†ÅÏö©
import Foundation
import UIKit
import Vision

// MARK: - ÌîÑÎ°úÌÜ†ÏΩú Ï†ïÏùò

/// ÌÖçÏä§Ìä∏ Ïù∏Ïãù ÏÑúÎπÑÏä§ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
/// - D: ÏÉÅÏúÑ ViewModelÏù¥ Íµ¨Ï≤¥ Íµ¨ÌòÑÏù¥ ÏïÑÎãå Ïù¥ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Ïóê ÏùòÏ°¥
protocol TextRecognitionService {
    /// Ïù¥ÎØ∏ÏßÄÏóêÏÑú RecognizedText Î™©Î°ùÏùÑ Ï∂îÏ∂ú
    func recognizeText(in image: UIImage, completion: @escaping (OCRResult) -> Void)
}

struct OCRResult {
    let texts: [RecognizedTextModel]
}

// MARK: - Vision Í∏∞Î∞ò Íµ¨ÌòÑÏ≤¥

/// Vision ÌîÑÎ†àÏûÑÏõåÌÅ¨Î•º ÏÇ¨Ïö©Ìïú ÌÖçÏä§Ìä∏ Ïù∏ÏãùÍ∏∞
/// - S: ÌÖçÏä§Ìä∏ Ïù∏ÏãùÎßåÏùÑ Îã¥Îãπ (Îã®Ïùº Ï±ÖÏûÑ)
final class ImageProcessingService: TextRecognitionService {
    func recognizeText(in image: UIImage, completion: @escaping (OCRResult) -> Void) {
        guard let cgImage = image.cgImage else {
            completion(OCRResult(texts: []))
            return
        }

        let request = VNRecognizeTextRequest { request, error in
            guard error == nil else {
                completion(OCRResult(texts: []))
                return
            }

            let observations = request.results as? [VNRecognizedTextObservation] ?? []

            let results: [RecognizedTextModel] = observations.compactMap { observation in
                guard let candidate = observation.topCandidates(1).first else { return nil }
                print("üîé Ïù∏ÏãùÎêú ÌÖçÏä§Ìä∏: \(candidate.string), Ïã†Î¢∞ÎèÑ: \(candidate.confidence)")
                return RecognizedTextModel(
                    text: candidate.string,
                    boundingBox: observation.boundingBox,
                    confidence: candidate.confidence
                )
            }

            let fullText = results.map { $0.text }.joined(separator: "\n")

            completion(OCRResult(texts: results))
        }

        request.recognitionLevel = .accurate
        request.recognitionLanguages = ["ko-KR","en-US"]
        request.usesLanguageCorrection = true

        let requestHandler = VNImageRequestHandler(cgImage: cgImage, options: [:])
        DispatchQueue.global(qos: .userInitiated).async {
            try? requestHandler.perform([request])
        }
    }
}
